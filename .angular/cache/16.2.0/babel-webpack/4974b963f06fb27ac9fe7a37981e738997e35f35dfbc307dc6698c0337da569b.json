{"ast":null,"code":"import { Injectable, NgZone, EventEmitter, Directive, Renderer2, Injector, Input, Output, Component, forwardRef, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass ScriptService {\n  /**\r\n   * @param {?} zone\r\n   */\n  constructor(zone) {\n    this.zone = zone;\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\n    this.windowGrecaptcha = 'grecaptcha';\n    /**\r\n     * Name of the global callback\r\n     */\n    this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n    this.globalDomain = 'recaptcha.net';\n    this.defaultDomain = 'google.com';\n  }\n  /**\r\n   * @param {?} useGlobalDomain\r\n   * @param {?} render\r\n   * @param {?} onLoad\r\n   * @param {?=} language\r\n   * @return {?}\r\n   */\n  registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\n    if (this.grecaptchaScriptLoaded()) {\n      // recaptcha script is already loaded\n      // just call the callback\n      this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        onLoad(window[this.windowGrecaptcha]);\n      });\n      return;\n    }\n    // we need to patch the callback through global variable, otherwise callback is not accessible\n    // note: https://github.com/Enngage/ngx-captcha/issues/2\n    window[this.windowOnLoadCallbackProperty] = /** @type {?} */ /**\r\n                                                                 * @return {?}\r\n                                                                 */\n    () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]));\n    // prepare script elem\n    /** @type {?} */\n    const scriptElem = document.createElement('script');\n    scriptElem.innerHTML = '';\n    scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n    scriptElem.async = true;\n    scriptElem.defer = true;\n    // add script to header\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n  /**\r\n   * @return {?}\r\n   */\n  cleanup() {\n    window[this.windowOnLoadCallbackProperty] = undefined;\n    window[this.windowGrecaptcha] = undefined;\n  }\n  /**\r\n   * Indicates if google recaptcha script is available and ready to be used\r\n   * @private\r\n   * @return {?}\r\n   */\n  grecaptchaScriptLoaded() {\n    if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Gets language param used in script url\r\n   * @private\r\n   * @param {?=} hl\r\n   * @return {?}\r\n   */\n  getLanguageParam(hl) {\n    if (!hl) {\n      return '';\n    }\n    return `&hl=${hl}`;\n  }\n  /**\r\n   * Url to google api script\r\n   * @private\r\n   * @param {?} useGlobalDomain\r\n   * @param {?} render\r\n   * @param {?=} language\r\n   * @return {?}\r\n   */\n  getCaptchaScriptUrl(useGlobalDomain, render, language) {\n    /** @type {?} */\n    const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\n    // tslint:disable-next-line:max-line-length\n    return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\r\n   * Name of the global google recaptcha script\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ScriptService.prototype.windowGrecaptcha;\n  /**\r\n   * Name of the global callback\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ScriptService.prototype.windowOnLoadCallbackProperty;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ScriptService.prototype.globalDomain;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ScriptService.prototype.defaultDomain;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ScriptService.prototype.zone;\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/base-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n/**\r\n * @abstract\r\n */\nclass BaseReCaptchaComponent {\n  /**\r\n   * @protected\r\n   * @param {?} renderer\r\n   * @param {?} zone\r\n   * @param {?} injector\r\n   * @param {?} scriptService\r\n   */\n  constructor(renderer, zone, injector, scriptService) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * Prefix of the captcha element\r\n     */\n    this.captchaElemPrefix = 'ngx_captcha_id_';\n    this.setupCaptcha = true;\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\n    this.useGlobalDomain = false;\n    /**\r\n     * Type\r\n     */\n    this.type = 'image';\n    /**\r\n     * Tab index\r\n     */\n    this.tabIndex = 0;\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     */\n    this.success = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     */\n    this.load = new EventEmitter();\n    /**\r\n     * Called when captcha is reset.\r\n     */\n    this.reset = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     */\n    this.ready = new EventEmitter();\n    /**\r\n     * Error callback\r\n     */\n    this.error = new EventEmitter();\n    /**\r\n     * Expired callback\r\n     */\n    this.expire = new EventEmitter();\n    /**\r\n     * Indicates if captcha should be set on load\r\n     */\n    this.setupAfterLoad = false;\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     */\n    this.resetCaptchaAfterSuccess = false;\n    /**\r\n     * Indicates if captcha is loaded\r\n     */\n    this.isLoaded = false;\n  }\n  /**\r\n   * @return {?}\r\n   */\n  ngAfterViewInit() {\n    this.control = this.injector.get(NgControl).control;\n  }\n  /**\r\n   * @return {?}\r\n   */\n  ngAfterViewChecked() {\n    if (this.setupCaptcha) {\n      this.setupCaptcha = false;\n      this.setupComponent();\n    }\n  }\n  /**\r\n   * @param {?} changes\r\n   * @return {?}\r\n   */\n  ngOnChanges(changes) {\n    // cleanup scripts if language changed because they need to be reloaded\n    if (changes && changes.hl) {\n      // cleanup scripts when language changes\n      if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    if (changes && changes.useGlobalDomain) {\n      // cleanup scripts when domain changes\n      if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    this.setupCaptcha = true;\n  }\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   * @return {?}\r\n   */\n  getResponse() {\n    return this.reCaptchaApi.getResponse(this.captchaId);\n  }\n  /**\r\n   * Gets Id of captcha widget\r\n   * @return {?}\r\n   */\n  getCaptchaId() {\n    return this.captchaId;\n  }\n  /**\r\n   * Resets captcha\r\n   * @return {?}\r\n   */\n  resetCaptcha() {\n    this.zone.run(\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      // reset captcha using Google js api\n      this.reCaptchaApi.reset();\n      // required due to forms\n      this.onChange(undefined);\n      this.onTouched(undefined);\n      // trigger reset event\n      this.reset.next();\n    });\n  }\n  /**\r\n   * Gets last submitted captcha response\r\n   * @return {?}\r\n   */\n  getCurrentResponse() {\n    return this.currentResponse;\n  }\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   * @return {?}\r\n   */\n  reloadCaptcha() {\n    this.setupComponent();\n  }\n  /**\r\n   * @protected\r\n   * @param {?} captchaElemId\r\n   * @return {?}\r\n   */\n  ensureCaptchaElem(captchaElemId) {\n    /** @type {?} */\n    const captchaElem = document.getElementById(captchaElemId);\n    if (!captchaElem) {\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n    }\n    // assign captcha alem\n    this.captchaElem = captchaElem;\n  }\n  /**\r\n   * Responsible for instantiating captcha element\r\n   * @protected\r\n   * @return {?}\r\n   */\n  renderReCaptcha() {\n    // run outside angular zone due to timeout issues when testing\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\n    this.zone.runOutsideAngular(\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n      this.ready.next();\n    });\n  }\n  /**\r\n   * Called when captcha receives response\r\n   * @protected\r\n   * @param {?} callback Callback\r\n   * @return {?}\r\n   */\n  handleCallback(callback) {\n    this.currentResponse = callback;\n    this.success.next(callback);\n    this.zone.run(\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.onChange(callback);\n      this.onTouched(callback);\n    });\n    if (this.resetCaptchaAfterSuccess) {\n      this.resetCaptcha();\n    }\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  getPseudoUniqueNumber() {\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  setupComponent() {\n    // captcha specific setup\n    this.captchaSpecificSetup();\n    // create captcha wrapper\n    this.createAndSetCaptchaElem();\n    this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit',\n    /**\r\n    * @param {?} grecaptcha\r\n    * @return {?}\r\n    */\n    grecaptcha => {\n      this.onloadCallback(grecaptcha);\n    }, this.hl);\n  }\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   * @private\r\n   * @param {?} grecapcha\r\n   * @return {?}\r\n   */\n  onloadCallback(grecapcha) {\n    // assign reference to reCaptcha Api once its loaded\n    this.reCaptchaApi = grecapcha;\n    if (!this.reCaptchaApi) {\n      throw Error(`ReCaptcha Api was not initialized correctly`);\n    }\n    // loaded flag\n    this.isLoaded = true;\n    // fire load event\n    this.load.next();\n    // render captcha\n    this.renderReCaptcha();\n    // setup component if it was flagged as such\n    if (this.setupAfterLoad) {\n      this.setupAfterLoad = false;\n      this.setupComponent();\n    }\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  generateNewElemId() {\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n  }\n  /**\r\n   * @private\r\n   * @return {?}\r\n   */\n  createAndSetCaptchaElem() {\n    // generate new captcha id\n    this.captchaElemId = this.generateNewElemId();\n    if (!this.captchaElemId) {\n      throw Error(`Captcha elem Id is not set`);\n    }\n    if (!this.captchaWrapperElem) {\n      throw Error(`Captcha DOM element is not initialized`);\n    }\n    // remove old html\n    this.captchaWrapperElem.nativeElement.innerHTML = '';\n    // create new wrapper for captcha\n    /** @type {?} */\n    const newElem = this.renderer.createElement('div');\n    newElem.id = this.captchaElemId;\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n    // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n    setTimeout(\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      // update captcha elem\n      if (this.captchaElemId) {\n        this.ensureCaptchaElem(this.captchaElemId);\n      }\n    }, 0);\n  }\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   * @param {?} obj\r\n   * @return {?}\r\n   */\n  writeValue(obj) {}\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   * @param {?} fn\r\n   * @return {?}\r\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   * @param {?} fn\r\n   * @return {?}\r\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\r\n   * Handles error callback\r\n   * @protected\r\n   * @return {?}\r\n   */\n  handleErrorCallback() {\n    this.zone.run(\n    /**\r\n    * @return {?}\r\n    */\n    () => {\n      this.onChange(undefined);\n      this.onTouched(undefined);\n    });\n    this.error.next();\n  }\n  /**\r\n   * Handles expired callback\r\n   * @protected\r\n   * @return {?}\r\n   */\n  handleExpireCallback() {\n    this.expire.next();\n    // reset captcha on expire callback\n    this.resetCaptcha();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\r\n   * Prefix of the captcha element\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.captchaElemPrefix;\n  /**\r\n   * @type {?}\r\n   * @private\r\n   */\n  BaseReCaptchaComponent.prototype.setupCaptcha;\n  /**\r\n   * Google's site key.\r\n   * You can find this under https://www.google.com/recaptcha\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.siteKey;\n  /**\r\n   * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.useGlobalDomain;\n  /**\r\n   * Type\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.type;\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.hl;\n  /**\r\n   * Tab index\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.tabIndex;\n  /**\r\n   * Called when captcha receives successful response.\r\n   * Captcha response token is passed to event.\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.success;\n  /**\r\n   * Called when captcha is loaded. Event receives id of the captcha\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.load;\n  /**\r\n   * Called when captcha is reset.\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.reset;\n  /**\r\n   * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.ready;\n  /**\r\n   * Error callback\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.error;\n  /**\r\n   * Expired callback\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.expire;\n  /** @type {?} */\n  BaseReCaptchaComponent.prototype.captchaWrapperElem;\n  /**\r\n   * Indicates if captcha should be set on load\r\n   * @type {?}\r\n   * @private\r\n   */\n  BaseReCaptchaComponent.prototype.setupAfterLoad;\n  /**\r\n   * Captcha element\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.captchaElem;\n  /**\r\n   * Id of the captcha elem\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.captchaId;\n  /**\r\n   * Holds last response value\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.currentResponse;\n  /**\r\n   * If enabled, captcha will reset after receiving success response. This is useful\r\n   * when invisible captcha need to be resolved multiple times on same page\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;\n  /**\r\n   * Captcha type\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.recaptchaType;\n  /**\r\n   * Required by ControlValueAccessor\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.onChange;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.onTouched;\n  /**\r\n   * Indicates if captcha is loaded\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.isLoaded;\n  /**\r\n   * Reference to global reCaptcha API\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.reCaptchaApi;\n  /**\r\n   * Id of the DOM element wrapping captcha\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.captchaElemId;\n  /**\r\n   * Form Control to be enable usage in reactive forms\r\n   * @type {?}\r\n   */\n  BaseReCaptchaComponent.prototype.control;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.renderer;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.zone;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.injector;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  BaseReCaptchaComponent.prototype.scriptService;\n  /**\r\n   * Gets reCaptcha properties\r\n   * @abstract\r\n   * @protected\r\n   * @return {?}\r\n   */\n  BaseReCaptchaComponent.prototype.getCaptchaProperties = function () {};\n  /**\r\n   * Used for captcha specific setup\r\n   * @abstract\r\n   * @protected\r\n   * @return {?}\r\n   */\n  BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () {};\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/recaptcha-type.enum.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n/** @enum {number} */\nconst ReCaptchaType = {\n  InvisibleReCaptcha: 0,\n  ReCaptcha2: 1\n};\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/invisible-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\n  /**\r\n   * @param {?} renderer\r\n   * @param {?} zone\r\n   * @param {?} injector\r\n   * @param {?} scriptService\r\n   */\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * This size representing invisible captcha\r\n     */\n    this.size = 'invisible';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n     * Badge\r\n     */\n    this.badge = 'bottomright';\n    this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n  }\n  /**\r\n   * @param {?} changes\r\n   * @return {?}\r\n   */\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   * @return {?}\r\n   */\n  execute() {\n    // execute captcha\n    this.zone.runOutsideAngular(\n    /**\r\n    * @return {?}\r\n    */\n    () => this.reCaptchaApi.execute(this.captchaId));\n  }\n  /**\r\n   * @protected\r\n   * @return {?}\r\n   */\n  captchaSpecificSetup() {}\n  /**\r\n   * Gets reCaptcha properties\r\n   * @protected\r\n   * @return {?}\r\n   */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback':\n      /**\r\n      * @param {?} response\r\n      * @return {?}\r\n      */\n      response => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleCallback(response)),\n      'expired-callback':\n      /**\r\n      * @return {?}\r\n      */\n      () => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleExpireCallback()),\n      'error-callback':\n      /**\r\n      * @return {?}\r\n      */\n      () => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\r\n   * This size representing invisible captcha\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.size;\n  /**\r\n   * Theme\r\n   * @type {?}\r\n   */\n  InvisibleReCaptchaComponent.prototype.theme;\n  /**\r\n   * Badge\r\n   * @type {?}\r\n   */\n  InvisibleReCaptchaComponent.prototype.badge;\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   * @type {?}\r\n   */\n  InvisibleReCaptchaComponent.prototype.hl;\n  /** @type {?} */\n  InvisibleReCaptchaComponent.prototype.captchaWrapperElem;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.recaptchaType;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.renderer;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.zone;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.injector;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  InvisibleReCaptchaComponent.prototype.scriptService;\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/recaptcha-2.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\n  /**\r\n   * @param {?} renderer\r\n   * @param {?} zone\r\n   * @param {?} injector\r\n   * @param {?} scriptService\r\n   */\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * Name of the global expire callback\r\n     */\n    this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n    /**\r\n     * Name of the global error callback\r\n     */\n    this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n     * Size\r\n     */\n    this.size = 'normal';\n    this.recaptchaType = ReCaptchaType.ReCaptcha2;\n  }\n  /**\r\n   * @param {?} changes\r\n   * @return {?}\r\n   */\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /**\r\n   * @return {?}\r\n   */\n  ngOnDestroy() {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n  /**\r\n   * @protected\r\n   * @return {?}\r\n   */\n  captchaSpecificSetup() {\n    this.registerCallbacks();\n  }\n  /**\r\n   * Gets reCaptcha properties\r\n   * @protected\r\n   * @return {?}\r\n   */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback':\n      /**\r\n      * @param {?} response\r\n      * @return {?}\r\n      */\n      response => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleCallback(response)),\n      'expired-callback':\n      /**\r\n      * @return {?}\r\n      */\n      () => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleExpireCallback()),\n      'error-callback':\n      /**\r\n      * @return {?}\r\n      */\n      () => this.zone.run(\n      /**\r\n      * @return {?}\r\n      */\n      () => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n  /**\r\n   * Registers global callbacks\r\n   * @private\r\n   * @return {?}\r\n   */\n  registerCallbacks() {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\r\n   * Name of the global expire callback\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;\n  /**\r\n   * Name of the global error callback\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;\n  /**\r\n   * Theme\r\n   * @type {?}\r\n   */\n  ReCaptcha2Component.prototype.theme;\n  /**\r\n   * Size\r\n   * @type {?}\r\n   */\n  ReCaptcha2Component.prototype.size;\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   * @type {?}\r\n   */\n  ReCaptcha2Component.prototype.hl;\n  /** @type {?} */\n  ReCaptcha2Component.prototype.captchaWrapperElem;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.recaptchaType;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.renderer;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.zone;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.injector;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptcha2Component.prototype.scriptService;\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/recaptcha_v3.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass ReCaptchaV3Service {\n  /**\r\n   * @param {?} scriptService\r\n   * @param {?} zone\r\n   */\n  constructor(scriptService, zone) {\n    this.scriptService = scriptService;\n    this.zone = zone;\n  }\n  /**\r\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param {?} siteKey Site key found in your google admin panel\r\n   * @param {?} action Action to log\r\n   * @param {?} callback Callback function to to handle token\r\n   * @param {?=} config Optional configuration like useGlobalDomain to be provided\r\n   * @param {?=} errorCallback Optional Callback function to handle errors\r\n   * @return {?}\r\n   */\n  execute(siteKey, action, callback, config, errorCallback) {\n    this.executeAsPromise(siteKey, action, config).then(callback).catch(\n    /**\r\n    * @param {?} error\r\n    * @return {?}\r\n    */\n    error => errorCallback ? errorCallback(error) : console.error(error));\n  }\n  /**\r\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param {?} siteKey Site key found in your google admin panel\r\n   * @param {?} action Action to log\r\n   * @param {?=} config\r\n   * @return {?}\r\n   */\n  executeAsPromise(siteKey, action, config) {\n    return new Promise(\n    /**\r\n    * @param {?} resolve\r\n    * @param {?} reject\r\n    * @return {?}\r\n    */\n    (resolve, reject) => {\n      /** @type {?} */\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\n      /** @type {?} */\n      const onRegister =\n      /**\r\n      * @param {?} grecaptcha\r\n      * @return {?}\r\n      */\n      grecaptcha => {\n        this.zone.runOutsideAngular(\n        /**\r\n        * @return {?}\r\n        */\n        () => {\n          try {\n            grecaptcha.execute(siteKey, {\n              action\n            }).then(\n            /**\r\n            * @param {?} token\r\n            * @return {?}\r\n            */\n            token => this.zone.run(\n            /**\r\n            * @return {?}\r\n            */\n            () => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\n    });\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptchaV3Service.prototype.scriptService;\n  /**\r\n   * @type {?}\r\n   * @protected\r\n   */\n  ReCaptchaV3Service.prototype.zone;\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-captcha.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nclass NgxCaptchaModule {}\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-captcha.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n//# sourceMappingURL=ngx-captcha.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
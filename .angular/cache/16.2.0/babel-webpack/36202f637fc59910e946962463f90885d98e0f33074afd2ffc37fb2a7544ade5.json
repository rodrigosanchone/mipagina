{"ast":null,"code":"import { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, observeOn, switchMap } from 'rxjs/operators';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, Pipe, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, ɵfetchInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport 'firebase/storage';\nimport { AsyncPipe } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: observable/fromTask.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\n/**\n * @param {?} task\n * @return {?}\n */\nfunction fromTask(task) {\n  return new Observable(\n  /**\n  * @param {?} subscriber\n  * @return {?}\n  */\n  subscriber => {\n    /** @type {?} */\n    const progress =\n    /**\n    * @param {?} snap\n    * @return {?}\n    */\n    snap => subscriber.next(snap);\n    /** @type {?} */\n    const error =\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => subscriber.error(e);\n    /** @type {?} */\n    const complete =\n    /**\n    * @return {?}\n    */\n    () => subscriber.complete();\n    // emit the current snapshot, so they don't have to wait for state_changes\n    // to fire next... this is stale if the task is no longer running :(\n    progress(task.snapshot);\n    /** @type {?} */\n    const unsub = task.on('state_changed', progress);\n    // it turns out that neither task snapshot nor 'state_changed' fire the last\n    // snapshot before completion, the one with status 'success\" and 100% progress\n    // so let's use the promise form of the task for that\n    task.then(\n    /**\n    * @param {?} snapshot\n    * @return {?}\n    */\n    snapshot => {\n      progress(snapshot);\n      complete();\n    },\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      // TODO investigate, again this is stale, we never fire a canceled or error it seems\n      progress(task.snapshot);\n      error(e);\n    });\n    // on's type if Function, rather than () => void, need to wrap\n    return (\n      /**\n      * @return {?}\n      */\n      function unsubscribe() {\n        unsub();\n      }\n    );\n  }).pipe(\n  // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n  // that if the task is already finished we don't emit the old running state\n  debounceTime(0));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: task.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction AngularFireUploadTask() {}\nif (false) {\n  /** @type {?} */\n  AngularFireUploadTask.prototype.task;\n  /**\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.snapshotChanges = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.percentageChanges = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.pause = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.cancel = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.resume = function () {};\n  /**\n   * @param {?=} onFulfilled\n   * @param {?=} onRejected\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.then = function (onFulfilled, onRejected) {};\n  /**\n   * @param {?} onRejected\n   * @return {?}\n   */\n  AngularFireUploadTask.prototype.catch = function (onRejected) {};\n}\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n * @param {?} task\n * @return {?}\n */\nfunction createUploadTask(task) {\n  /** @type {?} */\n  const inner$ = fromTask(task);\n  return {\n    task,\n    then: task.then.bind(task),\n    catch: task.catch.bind(task),\n    pause: task.pause.bind(task),\n    cancel: task.cancel.bind(task),\n    resume: task.resume.bind(task),\n    snapshotChanges:\n    /**\n    * @return {?}\n    */\n    () => inner$,\n    percentageChanges:\n    /**\n    * @return {?}\n    */\n    () => inner$.pipe(map(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => s.bytesTransferred / s.totalBytes * 100))\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction AngularFireStorageReference() {}\nif (false) {\n  /**\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.getDownloadURL = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.getMetadata = function () {};\n  /**\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.delete = function () {};\n  /**\n   * @param {?} path\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.child = function (path) {};\n  /**\n   * @param {?} meta\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.updateMetadata = function (meta) {};\n  /**\n   * @param {?} data\n   * @param {?=} metadata\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.put = function (data, metadata) {};\n  /**\n   * @param {?} data\n   * @param {?=} format\n   * @param {?=} metadata\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.putString = function (data, format, metadata) {};\n  /**\n   * @return {?}\n   */\n  AngularFireStorageReference.prototype.listAll = function () {};\n}\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n * @param {?} ref\n * @param {?} schedulers\n * @param {?} keepUnstableUntilFirst\n * @return {?}\n */\nfunction createStorageRef(ref, schedulers, keepUnstableUntilFirst) {\n  return {\n    getDownloadURL:\n    /**\n    * @return {?}\n    */\n    () => of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(\n    /**\n    * @return {?}\n    */\n    () => ref.getDownloadURL()), keepUnstableUntilFirst),\n    getMetadata:\n    /**\n    * @return {?}\n    */\n    () => of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(\n    /**\n    * @return {?}\n    */\n    () => ref.getMetadata()), keepUnstableUntilFirst),\n    delete:\n    /**\n    * @return {?}\n    */\n    () => from(ref.delete()),\n    child:\n    /**\n    * @param {?} path\n    * @return {?}\n    */\n    path => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst),\n    updateMetadata:\n    /**\n    * @param {?} meta\n    * @return {?}\n    */\n    meta => from(ref.updateMetadata(meta)),\n    put:\n    /**\n    * @param {?} data\n    * @param {?=} metadata\n    * @return {?}\n    */\n    (data, metadata) => {\n      /** @type {?} */\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString:\n    /**\n    * @param {?} data\n    * @param {?=} format\n    * @param {?=} metadata\n    * @return {?}\n    */\n    (data, format, metadata) => {\n      /** @type {?} */\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    },\n    listAll:\n    /**\n    * @return {?}\n    */\n    () => from(ref.listAll())\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: storage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BUCKET = /*#__PURE__*/new InjectionToken('angularfire2.storageBucket');\n/** @type {?} */\nconst MAX_UPLOAD_RETRY_TIME = /*#__PURE__*/new InjectionToken('angularfire2.storage.maxUploadRetryTime');\n/** @type {?} */\nconst MAX_OPERATION_RETRY_TIME = /*#__PURE__*/new InjectionToken('angularfire2.storage.maxOperationRetryTime');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nlet AngularFireStorage = /*#__PURE__*/(() => {\n  class AngularFireStorage {\n    /**\n     * @param {?} options\n     * @param {?} nameOrConfig\n     * @param {?} storageBucket\n     * @param {?} platformId\n     * @param {?} zone\n     * @param {?} maxUploadRetryTime\n     * @param {?} maxOperationRetryTime\n     */\n    constructor(options, nameOrConfig, storageBucket,\n    // tslint:disable-next-line:ban-types\n    platformId, zone, maxUploadRetryTime, maxOperationRetryTime) {\n      this.schedulers = new ɵAngularFireSchedulers(zone);\n      this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n      /** @type {?} */\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      this.storage = ɵfetchInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app,\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        const storage = zone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => app.storage(storageBucket || undefined));\n        if (maxUploadRetryTime) {\n          storage.setMaxUploadRetryTime(maxUploadRetryTime);\n        }\n        if (maxOperationRetryTime) {\n          storage.setMaxOperationRetryTime(maxOperationRetryTime);\n        }\n        return storage;\n      }, [maxUploadRetryTime, maxOperationRetryTime]);\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    ref(path) {\n      return createStorageRef(this.storage.ref(path), this.schedulers, this.keepUnstableUntilFirst);\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    refFromURL(path) {\n      return createStorageRef(this.storage.refFromURL(path), this.schedulers, this.keepUnstableUntilFirst);\n    }\n    /**\n     * @param {?} path\n     * @param {?} data\n     * @param {?=} metadata\n     * @return {?}\n     */\n    upload(path, data, metadata) {\n      /** @type {?} */\n      const storageRef = this.storage.ref(path);\n      /** @type {?} */\n      const ref = createStorageRef(storageRef, this.schedulers, this.keepUnstableUntilFirst);\n      return ref.put(data, metadata);\n    }\n  }\n  /** @nocollapse */AngularFireStorage.ɵprov = ɵɵdefineInjectable({\n    factory: function AngularFireStorage_Factory() {\n      return new AngularFireStorage(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(BUCKET, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone), ɵɵinject(MAX_UPLOAD_RETRY_TIME, 8), ɵɵinject(MAX_OPERATION_RETRY_TIME, 8));\n    },\n    token: AngularFireStorage,\n    providedIn: \"any\"\n  });\n  return AngularFireStorage;\n})();\n/** @nocollapse */\nif (false) {\n  /** @type {?} */\n  AngularFireStorage.prototype.storage;\n  /** @type {?} */\n  AngularFireStorage.prototype.keepUnstableUntilFirst;\n  /** @type {?} */\n  AngularFireStorage.prototype.schedulers;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: pipes/storageUrl.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * to be used with in combination with | async\n */\nclass GetDownloadURLPipe {\n  /**\n   * @param {?} storage\n   * @param {?} cdr\n   */\n  constructor(storage, cdr) {\n    this.storage = storage;\n    this.asyncPipe = new AsyncPipe(cdr);\n  }\n  /**\n   * @param {?} path\n   * @return {?}\n   */\n  transform(path) {\n    if (path !== this.path) {\n      this.path = path;\n      this.downloadUrl$ = this.storage.ref(path).getDownloadURL();\n    }\n    return this.asyncPipe.transform(this.downloadUrl$);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.asyncPipe.ngOnDestroy();\n  }\n}\n\n/** @nocollapse */\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  GetDownloadURLPipe.prototype.asyncPipe;\n  /**\n   * @type {?}\n   * @private\n   */\n  GetDownloadURLPipe.prototype.path;\n  /**\n   * @type {?}\n   * @private\n   */\n  GetDownloadURLPipe.prototype.downloadUrl$;\n  /**\n   * @type {?}\n   * @private\n   */\n  GetDownloadURLPipe.prototype.storage;\n}\nclass GetDownloadURLPipeModule {}\n/**\n * @fileoverview added by tsickle\n * Generated from: storage.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AngularFireStorageModule {}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-fire-storage.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, createStorageRef, createUploadTask, fromTask };\n//# sourceMappingURL=angular-fire-storage.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}